import { VoiceData, VoiceListResponse, VoiceServiceOptions, AudioPlaybackState } from '../types';

/**
 * Classe base abstrata para servi√ßos de plataformas de √°udio
 */
export abstract class BasePlatformService {
  protected abstract platformName: string;
  protected abstract apiBaseUrl: string;

  /**
   * Busca dados completos de uma voz espec√≠fica
   */
  abstract fetchVoiceDetails(voiceId: string, apiKey?: string): Promise<VoiceData>;

  /**
   * Lista vozes da plataforma
   */
  abstract listVoices(apiKey?: string, options?: VoiceServiceOptions): Promise<VoiceListResponse>;

  /**
   * Normaliza dados da plataforma para o formato padr√£o
   */
  protected abstract normalizeVoiceData(rawData: any): VoiceData;

  /**
   * Configura headers espec√≠ficos da plataforma
   */
  protected abstract getHeaders(apiKey?: string): HeadersInit;

  /**
   * Configura elemento de √°udio para a plataforma
   */
  protected abstract configureAudioElement(audio: HTMLAudioElement): void;

  /**
   * Reproduz preview de √°udio (implementa√ß√£o padr√£o)
   */
  async playPreview(voice: VoiceData): Promise<HTMLAudioElement | null> {
    try {
      if (!voice.preview_url) {
        console.warn(`‚ùå ${this.platformName}: Voz sem preview URL`, voice.nome_voz);
        return null;
      }

      // Verificar se a URL √© v√°lida
      if (!voice.preview_url.startsWith('http')) {
        console.warn(`‚ùå ${this.platformName}: URL inv√°lida para`, voice.nome_voz);
        return null;
      }

      // Criar elemento de √°udio
      const audio = new Audio(voice.preview_url);

      // Configurar elemento espec√≠fico da plataforma
      this.configureAudioElement(audio);

      // Reproduzir √°udio
      try {
        await audio.play();
        console.log(`‚úÖ ${this.platformName}: √Åudio iniciado para`, voice.nome_voz);
      } catch (playError) {
        console.warn(`‚ö†Ô∏è ${this.platformName}: Erro no play, tentando fallback...`);

        // Tentar novamente sem CORS como fallback para Fish Audio
        if (this.platformName === 'Fish-Audio' && playError.message.includes('no supported source')) {
          console.log(`üîÑ ${this.platformName}: Tentando sem CORS...`);
          const audioFallback = new Audio(voice.preview_url);
          audioFallback.crossOrigin = null; // Sem CORS
          audioFallback.preload = 'auto';

          try {
            await audioFallback.play();
            console.log(`‚úÖ ${this.platformName}: Sucesso com fallback!`);
            return audioFallback;
          } catch (fallbackError) {
            console.error(`‚ùå ${this.platformName}: Fallback falhou:`, fallbackError.message);
            throw fallbackError;
          }
        }

        throw playError; // Re-throw se n√£o conseguiu resolver
      }
      
      return audio;

    } catch (error) {
      console.error(`‚ùå ${this.platformName}: Erro ao reproduzir preview de ${voice.nome_voz}:`, error.message);
      return null;
    }
  }

  /**
   * Para reprodu√ß√£o de √°udio
   */
  stopAudio(audio: HTMLAudioElement | null): void {
    if (audio) {
      audio.pause();
      audio.currentTime = 0;
    }
  }

  /**
   * Valida se uma URL de √°udio √© v√°lida
   */
  protected isValidAudioUrl(url: string): boolean {
    if (!url || typeof url !== 'string') return false;
    if (!url.startsWith('http')) return false;
    
    // Verificar extens√µes de √°udio comuns
    const audioExtensions = ['.mp3', '.wav', '.ogg', '.m4a', '.aac'];
    const hasAudioExtension = audioExtensions.some(ext => url.toLowerCase().includes(ext));
    
    // Se n√£o tem extens√£o de √°udio, ainda pode ser v√°lido (alguns servi√ßos usam URLs din√¢micas)
    return true;
  }

  /**
   * Cria um timeout para opera√ß√µes de rede
   */
  protected createTimeout(ms: number): Promise<never> {
    return new Promise((_, reject) => {
      setTimeout(() => reject(new Error(`Timeout ap√≥s ${ms}ms`)), ms);
    });
  }

  /**
   * Faz uma requisi√ß√£o com timeout
   */
  protected async fetchWithTimeout(url: string, options: RequestInit, timeoutMs: number = 10000): Promise<Response> {
    return Promise.race([
      fetch(url, options),
      this.createTimeout(timeoutMs)
    ]);
  }
}